#!/usr/bin/python

# To access file system and allow for switches
import os, sys
import argparse

# Numerical methods libaries and plotting
import numpy as np
from matplotlib import pyplot as plt
from scipy.optimize import newton


from test_suite import test

##-------------------Command Line Interface----------------------------------

'''
MOS-SIM Executable

This file conatins the main function for the MOS-SIM Executable.
To run this file file with the appropriate tests, run

"mos-sim test"

To run a custom sweep run the follwing, and follow the on-screen instructions. 

"mos-sim"

'''

def main(argv):

	parser = argparse.ArgumentParser(description='MOSFET Simulation Code.')
	parser.add_argument('-t', '--test', help='Run tests.', action="store_true")
	args = parser.parse_args()

	if args.test:

		pot = surfacePotential(1.8, -0.8, 1, 0.47, 0.5)
		implPot = implicitPotential(1.8, -0.8, 1, 0.47, 0.5)
		print implPot(pot)
		

##-------------------Constants (Global Variables)----------------------------

q = 1.602*(10**(-19))			# Coulombs
epsilonSi = 1.05*(10**(-12)) 	# Semiconductor Units
thermalVoltage = 0.026 			# Volts
intrinsicCarriers = 10**10		# cm^-3

##-------------------Source Code (as opposed to Drain Code)------------------


'''
Function to calculate the MOSFET drain to source current.

sourceBody: 	float 	representing the sourceBody bias
drainSource: 	float	representing drainSource voltage bias
gateSource: 	float 	representing gateSource votlage bias

'''

class MOSFET(object):

	def __init__(flatband, acceptorDoping, oxideThickness, width, length, mobility, dataPoints = 1000):

		# Given parameters
		self.flatband = flatband
		self.width = width
		self.length = length
		self.mobility = mobility

		# Derived parameters
		self.fermiPotential = thermalVoltage*np.log(acceptorDoping/intrinsicCarriers)
		self.bodyCoeff = 0.53*(oxideThickness/10.0)*np.sqrt(acceptorDoping/(10**17))

		# Default simulation parameters
		self.dataPoints = dataPoints


	def model(sourceBody, drainSource, gateSource):
		
		self.gateBody = gateSource + sourceBody

		drainSourceRange = np.linspace(drainSource[0], drainSource[1], self.dataPoints)
	
		return 

	def diffusionCurrent():
		##TODO
		return

	def driftCurrent():
		##TODO
		return

	# Direct calculation of surface potential via newton-raphson
	def surfacePotential(contactBody):

		return newton(implicitPotential(self.gateBody, self.flatband, contactBody, self.fermiPotential, self.bodyCoeff), 0)

	# Implicit anonymous function
	def implicitPotential(gateBody, flatband, contactBody, fermiPotential, bodyCoeff):

		return lambda x: gateBody - flatband - x - bodyCoeff*np.sqrt(x + thermalVoltage*np.exp((x - 2*fermiPotential - contactBody)/thermalVoltage))


	'''
	Function to plot MOSFET data.

	sourceBody: 	float 	representing the sourceBody bias
	drainSource: 	2-tuple representing drainSource voltage range
	gateSource: 	2-tuple representing gateSource votlage range

	'''
	def plotModel(sourceBody, drainSourceRange, gateSourceRange):
		return




if __name__ == "__main__":
   main(sys.argv[1:])
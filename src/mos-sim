#!/usr/bin/python

# To access file system and allow for switches
import os, sys
import argparse

# Numerical methods libaries and plotting
import numpy as np
from matplotlib import pyplot as plt
from scipy.optimize import newton

from MOSFET import MOSFET
from test_suite import test

##-------------------Command Line Interface----------------------------------

'''
MOS-SIM Executable

This file conatins the main function for the MOS-SIM Executable.
To run this file file with the appropriate tests, run

"mos-sim test"

To run a custom sweep run the follwing, and follow the on-screen instructions. 

"mos-sim"

'''

def main(argv):

	parser = argparse.ArgumentParser(description='MOSFET Simulation Code.')
	parser.add_argument('-t', '--test', help='Run tests.', action="store_true")
	parser.add_argument('-v', '--verbose', help='Print debug info to console.', action="store_true")
	args = parser.parse_args()

	if args.test:

		# Instantiate a new FET
		mosfet = MOSFET(-0.8, 5e17, 2.5, 10.0, 10.0, [400], verbose = args.verbose)

		# Model it
		mosfet.model(0.0, [0, 1.5], [1, 1.5])
		mosfet.plotModel()

	else:

		mosfet1 = MOSFET(-1.0, 7e17, 2, 10.0, 10.0, [85.8], verbose = args.verbose)
		mosfet2 = MOSFET(-1.0, 7e17, 2, 10.0, 10.0, [85.8, 0.4], verbose = args.verbose)

		mosfet1.model(0.0, [0, 1.5], [1, 1.5])
		mosfet2.model(0.0, [0, 1.5], [1, 1.5])

		data1 = mosfet1.getSimulationData()
		data2 = mosfet2.getSimulationData()

		plt.xlabel('Drain Source Voltage [V]')
		plt.ylabel('Drain Source Current [mA]')


		plt.plot(data1[0], data1[1][0], label = 'Vgs=1')
		plt.plot(data1[0], data2[1][0], linestyle='dashed', label='Vgs=1')
		plt.plot(data1[0], data1[1][1], label = 'Vgs=1.5')
		plt.plot(data1[0], data2[1][1], linestyle='dashed', label = 'Vgs=1')
		plt.legend(loc = 2)
		plt.show()


if __name__ == "__main__":
   main(sys.argv[1:])